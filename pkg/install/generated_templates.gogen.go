// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-config.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-config.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 463,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x4b\x03\x31\x10\x85\xef\xf9\x15\x8f\x16\x6f\xdd\x82\x1e\xf7\x26\x05\xc1\x83\x5e\x14\xef\xc3\x66\xb6\x1d\xdc\x26\x4b\x32\xdb\x0a\x31\xff\x5d\x36\xa1\xcb\x2a\x9e\x32\xc3\xbc\xf7\x65\x5e\x92\x12\xa4\xc7\xfe\xe0\x5d\x2f\xc7\x27\x19\xf8\xe0\x9d\xb2\x53\x34\x39\x9b\xa6\x69\xcc\x16\xef\x27\x46\xef\x87\xc1\x5f\xc5\x1d\x21\x11\x53\x64\x0b\xf5\x18\x83\xbf\x88\x65\x10\xba\x62\x9f\x02\xa9\x78\x87\xde\x07\xf4\xc3\xf4\x65\xf7\x66\x8b\xe7\x85\xfe\x18\xeb\xf9\x42\xe3\x4c\x89\xac\x33\x44\xc3\xc4\x3b\xe8\x89\xff\x40\x24\xa2\x0b\x4c\xca\xd6\x6c\x41\x11\x84\xc5\xbd\x83\xd7\x13\x87\xab\x44\x86\xe8\x4a\x59\x75\x6f\xdc\x05\xd6\xbd\xa1\x51\x3e\x38\x44\xf1\xae\xc5\xe5\xde\x7c\x8a\xb3\x2d\x7e\xe5\x5d\x6f\x94\xf3\x52\xa7\x04\x1e\x22\x23\xe7\x8a\x9a\x7b\x67\x91\xb3\x39\xb3\x92\x25\xa5\xd6\x00\x8e\xce\xdc\x96\x9c\x4d\xdd\xdc\xe0\x46\x7f\xa5\x33\xc7\x91\x3a\x2e\xaf\x58\xa5\xa5\x2f\xf7\xaf\xc6\x65\x9a\x52\x73\xe3\x57\x76\x4a\x18\x83\x38\xed\xb1\xb9\x8b\x9b\xff\x3e\xe7\x1b\xe2\xec\x5c\x3c\xcc\xae\x15\xe0\x27\x00\x00\xff\xff\x02\xd2\xd6\x67\xcf\x01\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 8364,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdd\x73\xdb\x36\x12\x7f\xf7\x5f\xb1\xa3\xdc\x4c\xe2\x19\x91\xb2\xeb\xb6\x77\xc3\x9e\x3b\x97\xe6\xc3\xf5\xa5\x49\x3d\x76\x7c\x37\x7d\xaa\x21\x72\x25\x62\x04\x02\x3c\x2c\x28\x55\xe3\xe9\xff\x7e\xb3\x00\x3f\x40\x49\x96\x73\x79\x3b\x3f\xc4\x31\x09\x2c\x76\x7f\xfb\xf5\xc3\x32\x49\x92\x13\x51\xcb\x7f\xa1\x25\x69\x74\x06\xa2\xae\x69\xb6\x3e\x3f\x59\x49\x5d\x64\xf0\x16\x6b\x65\xb6\x15\x6a\x77\x52\xa1\x13\x85\x70\x22\x3b\x01\xd0\xa2\xc2\x0c\x16\xaa\xf9\xe3\xf1\x11\xe4\x02\xd2\x4f\xa2\x42\xaa\x45\x8e\xf0\xe7\x9f\xed\x7b\xff\x67\x06\x8f\x8f\xe3\xb7\x8f\x8f\x80\xba\xe0\x65\x54\x63\xce\xc2\x2c\xd6\x4a\xe6\x82\x32\x38\x3f\x01\x20\x54\x98\x3b\x63\xf9\x0d\x40\x25\x5c\x5e\xfe\x22\xe6\xa8\x28\x3c\x88\xcf\xe6\xd5\xce\x0a\x87\xcb\x6d\x78\xe9\xb6\x35\x66\x70\x8b\xb9\x45\xe1\xf0\x04\xc0\x61\x55\x2b\xe1\xb0\x15\x16\x59\xc0\x3f\x42\x6b\xe3\x84\x93\x46\xf7\xc2\x01\x6a\x6b\x2a\x74\x25\x36\x94\x4a\x33\xab\x8d\x75\x19\x4c\x2e\xce\x2e\xce\x27\xf0\x02\x1c\x2a\x15\xad\x00\x67\x80\x72\x2b\x6a\x84\x59\x85\xce\xca\x9c\xd8\xb8\xda\x48\xed\x5e\x12\xf0\xe6\xb4\x15\xac\x46\x36\xec\x58\x01\xd0\x61\xe1\x5f\x99\x02\xef\x46\x28\xf0\xcf\x1c\x9d\x48\x57\xcd\x1c\xad\x46\x87\x5e\x39\x43\x19\x28\xa9\x5b\x11\x0c\x9d\x5d\xcb\x1c\x5f\xe7\xb9\x69\xb4\xfb\x34\x3e\x01\x60\x6d\x54\x53\x61\xaf\x43\xd2\xea\xb0\x94\x2e\x59\xe1\xb6\x3f\x88\x18\x3e\x37\x1c\xdc\x3d\x19\xe4\x25\xbc\xa5\xf0\x91\x11\xad\x2a\x70\x21\x1a\xe5\x3e\x9a\x02\x33\x38\xfb\xf6\xec\x0c\x5e\xc0\xa6\x44\x0d\x15\x6b\x83\x05\x58\x14\x45\x62\xb4\xda\x4e\x61\x83\xb0\x31\xfa\xa5\x83\x39\x82\x98\x2b\x64\x20\xf3\xb2\x32\xc5\x49\x2b\xf0\x05\x7c\x2e\x25\x81\x24\x10\xe0\xaa\x7a\x41\xd0\x10\x16\xb0\x30\x16\x96\xa8\xd1\x0a\x27\xf5\x12\xee\xee\x7e\x86\x15\x6e\x29\x85\x6b\x0d\x1f\xfe\x46\xf0\xe3\x25\x9c\xa7\xe7\x67\xd3\x5e\x4a\x77\x76\x30\x81\x40\x58\x8c\xf5\x20\xc3\xaa\x68\xc4\x02\x04\x10\xd6\x82\xa3\xa9\x05\x0a\x36\xd8\x8b\xc9\x85\x86\x8d\x95\x8e\x15\x4d\x0f\xe3\xb7\x44\xdd\x83\x81\x55\xed\xb6\x6f\xa5\x8d\x41\xac\xb0\x90\x4d\x95\xc1\x47\xac\x8c\xdd\xc6\x76\x22\x2c\x8c\x52\x66\xc3\x16\xb5\x47\x4b\xf2\xa6\x36\xc4\xcf\x04\xe4\x0d\x39\x53\x49\x46\x60\xa5\xcd\x46\xff\x5e\x1a\x72\xd4\x8b\x58\x48\x85\x53\xd8\x94\x32\x2f\x61\x6b\x1a\xd8\x48\xa5\x82\x51\xce\x40\x61\x38\x41\xf9\x31\x6f\xe2\xff\x58\x30\x1b\xcd\x6a\xf7\x02\x2c\xd6\x06\xac\x70\x25\x5a\x70\xa5\xd0\xed\xc1\x4b\xe9\xca\x66\x0e\x86\x1f\x22\x28\xb9\xc2\x14\x7e\x33\xcd\x4b\xa5\x40\x28\x32\xdd\x11\x63\xb0\x41\x3a\x90\xda\x19\xbf\x27\x37\xda\x09\xa9\xd1\x4e\x61\x8e\xca\x6c\x52\xb8\xc3\x01\xd5\xd2\xb9\x9a\xb2\xd9\xac\x30\x39\xa5\x1c\x58\x79\xc1\x61\x8d\x7a\xc6\x39\x4b\x6e\xb6\x6c\x64\x81\x34\x6b\x08\x93\xda\xca\xb5\x70\xe8\x43\x8f\x0d\x49\x4b\x57\xa9\x5e\x52\xe7\x0b\xa2\x32\xc9\x8d\x5e\xc8\x65\xff\x0a\x20\x3c\xf8\x28\xea\x2c\x7a\x18\x67\x60\x12\x6d\xfb\x5a\xbf\xf8\xd4\x9c\x05\x21\x43\xf8\x3d\xeb\x93\x8d\xa4\x92\x9f\x94\x62\x8d\x20\xa0\x90\x8b\x05\x5a\xae\xb6\x9d\x84\x36\xab\x86\x8a\xea\x5d\x10\xc4\xc5\x4e\xe0\xaa\xb4\x96\x05\x76\xb0\x2f\xe4\xb2\x12\xf5\xa0\x88\x74\x25\x08\x0d\xa8\x9d\xdd\x7a\x1b\x1e\xc2\xa2\x87\x29\x08\x5d\x40\xa3\x73\x53\x71\x99\xf7\xfb\x83\xb5\x1f\xbd\x3b\x85\x2e\x7a\x29\xa8\xd7\x5e\x82\x44\x6a\xfd\xb9\xe7\x01\x86\xe1\x2b\x3c\x10\x6d\x7b\xd6\x03\xbe\x12\x38\x03\xb2\xe2\x02\x0b\x57\x37\x57\xbe\x08\xc0\x2b\x36\x8b\xe4\x52\x4b\x3d\x1c\xce\xc6\xad\xd1\xca\x85\xcc\x7d\xa5\x87\xba\xb1\xb5\x21\xa4\xd3\x2f\x00\xb2\x97\x12\xca\x47\x40\x91\x01\xe2\xf3\xbe\x00\x38\x10\x76\x39\xa4\xe9\x13\x88\x2d\xeb\x25\xd7\x0f\x8a\xa0\x19\x97\xe0\x17\x4f\x14\xe1\xfd\x7d\x07\x8a\x70\x07\xe7\xe3\x63\xe2\x1b\xf5\x1b\x0f\xf2\x7b\xa9\xf0\x8d\xd1\x8e\xf5\xf6\x0d\xfb\xcb\x10\xef\xa0\x11\xad\x47\x1b\x1b\x30\x65\xe0\x59\xa7\x62\x24\x69\xd8\x1f\xfa\x71\xc1\x0a\x30\x4a\x49\x9b\x6c\x09\x17\x2e\x60\xfc\x18\x2b\x25\xf5\x00\xb8\xa9\xbd\x60\x49\xdd\x99\x45\x0a\xd7\xbd\xfa\xaf\xe9\x4d\x17\x51\xbc\x84\xd0\xb1\x76\xce\x36\x38\x1d\xb9\x6d\xac\x25\x37\x13\xa2\xa6\x0a\xb6\x70\xe7\x81\x5e\xcc\x14\x0c\x57\xbf\x8d\x24\xf4\x05\xac\x5f\xda\xcb\xea\xb6\xdc\x79\x3f\xa4\x07\x61\x8d\xf5\xea\x61\x4d\xe2\x38\x6f\x0d\x0f\xd0\xf4\xdd\x61\x2f\x3f\x76\xb2\x63\x94\x50\x7c\x24\x33\xa8\xa4\x3f\xa1\x55\xe2\x95\x36\xee\x80\x26\xa7\xff\x93\x2a\x5f\xd0\xfd\xbf\x40\x9b\x96\xe1\x9d\xf4\xe6\x85\x2e\xb0\xc7\x3d\x22\x76\xd2\x46\x8d\x45\xdf\xa3\xb5\x81\x49\x16\xba\xc0\x04\x64\x25\x96\x48\x7d\x94\xa5\xf0\x5e\xea\xc2\x47\x52\xc5\x2d\xcd\x62\x3e\x54\xcc\xd0\xce\x14\x0a\x42\x6e\x5c\x7e\x2b\x17\x00\x26\xb7\x20\x5c\xdf\x73\xca\x66\x9e\x16\x26\x5f\xa1\x4d\x73\x53\xcd\xec\x2c\xf4\x1f\xff\x6b\xe6\x44\x9f\xb6\x5d\x0d\x61\x92\xca\x04\x96\x4f\x75\x62\x09\xac\x69\xda\xaf\xf1\xc7\x64\xd0\x0a\x94\x26\x96\x96\x9d\xa7\xe7\x7f\x4d\xcf\xc7\x6b\x6f\x1a\xa5\x6e\x8c\x92\xf9\x36\x83\xeb\xc5\x27\xe3\x6e\x2c\x52\x6c\x85\x45\x32\x8d\xcd\x91\x62\x57\x58\xfc\x4f\x83\xe4\x46\xcf\x00\xf2\xba\xc9\xe0\xbb\xb3\x6a\xf4\xb0\xf2\x34\x23\x83\xef\xbf\xfd\x28\x07\x6e\x6b\x6c\xbc\x39\x19\x3c\x73\xe3\x79\xee\xc5\xd9\x05\xb3\x36\xa9\x17\xc6\x56\x3e\x69\x84\xea\x57\x2b\xb9\x46\x8d\x44\x37\xd6\xcc\x31\xd6\x80\x21\xbd\x1a\xc7\x4c\x38\x2a\x08\x1c\x3f\x16\xae\xcc\x60\x26\x6a\x19\x90\x5e\x7f\x3f\x93\x05\x6a\x27\xdd\x36\xad\x9b\x79\xb4\x56\x6a\xe9\xa4\x50\x6f\x51\x89\xed\x1d\xf7\x86\x82\x32\xf8\x2e\x5a\xe0\x64\x85\xa6\x71\x07\xde\x31\xc1\x93\xff\x1f\xaa\x46\x0d\x63\xe4\x98\xc3\xd4\x1c\x02\xc5\xba\x09\x9a\xa1\xcb\xbd\x66\xc5\x8c\xa8\x0c\x15\xca\x5f\x97\x40\x99\xb6\xd7\x2d\xd9\x65\x20\x75\x88\xb9\x97\x14\xf6\x10\x95\xb3\x51\x0e\x77\x98\xfd\xaa\xd5\x36\xf3\x65\x94\xa5\x31\xff\xf6\xdd\x71\xde\x92\x0a\x4e\xa9\x1a\xed\xc2\xd8\x1c\x59\x68\x20\xdc\xcc\xb7\x9f\x52\x3c\xe6\xc4\x63\xdd\xd7\xc2\xb6\xba\x87\x65\x5f\xa7\x7e\x94\xa3\xd7\x3a\x57\x8d\xef\xda\x7c\x6d\x08\xe4\xaa\xeb\xe8\x81\x97\x3e\x43\xa3\x3b\x22\xfd\x03\x6f\xdd\xa1\xb8\x43\x33\x2b\x30\x57\xc2\xf2\x75\x61\x6e\xd6\x51\x01\x38\x42\x41\x43\x6b\x8e\x8d\xb7\xc6\xb8\x59\x4a\x54\x3e\x69\x80\xd0\xa3\x53\x27\x03\x3d\x9a\x84\x93\xa7\xdd\x92\x48\x02\xea\xb5\xb4\x46\x7b\x32\x12\x78\xde\xe4\xc3\xfd\x4f\xef\xde\xfc\xfa\xe9\xfd\xf5\xd5\x24\xd0\x8f\x29\xe3\x61\xd6\x68\xed\x98\x2b\x46\x62\x7c\xb3\x9f\x6f\x03\x93\x73\xea\x90\x8d\x7b\x24\x6f\xdf\xc6\x21\x38\x79\xf1\x93\x86\x32\xa9\xe0\xdb\x72\x77\x1a\x97\xe8\x88\x06\xb7\xda\x79\x9f\x44\x22\x76\xc9\x74\xec\x74\xcf\xa4\xbb\x6b\x9f\xd0\x20\x94\x43\xab\xf9\x5a\xb7\xa7\xf1\xc2\x9a\xaa\xe7\x32\x15\x93\x00\x41\x1c\x6e\x2d\xa3\x63\x18\x94\xc9\x57\xb4\xef\x6c\xd4\xeb\xec\x00\x2e\x03\xdc\x23\x5c\xd6\x42\x35\xb8\x87\xc9\x73\x41\xbc\x1b\x03\x1d\xdf\x3b\x12\x01\x4c\x37\xc7\x34\xf3\x08\xd1\x7c\x22\x2e\x79\x55\x60\xd6\xa3\x75\xe3\xfa\x30\x28\xdd\xce\x7f\xf6\x69\xe5\x40\x08\xfa\xab\x21\x45\x01\xd7\x99\x15\x7c\xc0\x06\x1d\xb8\x35\xee\xd5\x95\x23\xc4\xe5\x89\xf0\x8b\x14\xdd\xa5\x25\x4f\x95\x8d\x8d\xd0\x9e\x4f\x52\x53\xd7\x6a\x0b\x3f\x7f\xfe\x7c\x03\x73\x41\x32\x07\xd1\xb8\x92\xc9\xac\x6f\x03\x42\x05\x4a\x32\x5c\xa4\x59\xe0\x5a\x0a\x6f\xc3\xc3\xd5\xf5\xe7\xdf\x5f\xdf\x7f\xfe\xf9\xfe\xee\xdd\xed\x83\xf7\x55\xff\xe8\xc3\xbb\xdf\x1e\x46\xd9\xba\x16\x56\x8a\xb9\x42\xea\x6e\x96\x91\x40\x1a\xf1\xcd\x36\xf8\xde\x5b\x53\x8d\x03\x30\x2c\xbb\xc5\x45\x36\x72\xdb\x88\x46\x72\x55\x66\x13\x06\x00\x38\x60\xb2\x11\x1e\x01\x82\x30\xdc\xc1\x82\x69\x44\x2e\xf2\x92\xb9\xbb\x1e\x25\x66\x7f\x1f\x65\xa4\x58\xfa\x34\x92\x62\x6c\x7b\xe1\x8c\x36\xb4\xc3\x29\xbf\x71\xea\x0f\xc9\x85\xee\x30\x76\x25\x52\x1c\xc8\xc3\x25\xc4\x6d\x0c\x6b\xd9\x30\x4e\xbe\x5c\xf8\x11\x9c\x77\x2d\x94\x66\xe3\x07\x47\x46\x6b\xcc\xbd\xcb\xa4\x1b\x07\x7e\x92\xf4\x06\xf8\xa9\x01\x1f\x7e\xd9\x3f\x4a\xdb\xdb\x52\x4a\xeb\x3c\xcd\x55\x43\x0e\x6d\xca\xdd\x47\xc5\x90\xdc\x53\x28\x94\x03\x14\x6f\xc2\xd2\xeb\x9b\x91\x51\x5c\x33\x09\x9d\x1f\x4c\x8d\xd3\x72\xd0\xa1\x5b\xcf\xd1\xe5\x2c\xaf\xf4\xa3\xa2\x28\xce\x63\x8d\xdb\xd5\x97\x27\x23\x8a\x2c\x09\xaa\x86\xfc\xe8\xcc\xa3\x27\xb1\x08\xb5\x60\xee\xbb\xb2\x27\xa8\x7e\x62\xf6\xaa\x1b\x43\x9d\xee\x26\x62\xd7\xbf\xa6\x3e\x80\xa3\xc1\xd9\x48\x11\xee\x64\xa1\x3b\x27\x85\xb4\x97\x7b\x3d\x3b\x56\xeb\x36\xa2\xc7\x83\xf3\xee\x6f\x7f\x09\x93\x3d\xa1\x97\xe1\xdd\x95\x74\x7e\xda\x44\xd2\x19\xbb\xed\x7b\xcd\x7b\xa6\xf5\x91\xb8\x63\x39\xc7\x61\x13\xd9\xde\xa6\xcc\xc1\x74\x8a\x73\xa1\x23\xfe\x7f\x79\x15\x67\xe6\x69\x36\xfc\xfd\xe1\xdd\x6f\xa7\xff\x08\x33\x2f\x7f\x27\x68\x08\xed\x6c\x50\x36\x8d\x13\xbd\xbb\xf7\x5d\x49\xc7\x46\x46\xb5\x8e\x91\xe3\x44\x6b\xac\xba\x7c\x7c\x3c\xb4\xc2\x57\x22\x45\x08\xa3\x0a\x19\xef\x5b\x4a\x17\x29\x92\x45\x97\x89\x64\x89\x2e\x21\x27\xac\xc3\x83\xa5\x6d\x57\x8b\xb9\x15\x3a\x2f\x3b\x45\x7e\xf2\x7f\xed\xea\xd2\xda\xc1\x95\x93\x0e\xc9\x60\x22\xcc\x12\xee\x7c\xc4\xd2\x3f\x8d\xd4\xd1\x86\xc9\x74\xf2\xbc\x71\xc7\xca\xac\x45\x4e\x85\x3c\x0c\x50\x2a\xa1\xe5\x82\xaf\x38\x9c\xd5\x24\x0b\xb4\x21\x40\x76\x2e\x8a\xbe\x51\x18\x42\x68\x74\x81\x76\x27\xea\x2c\x2a\xe1\xe4\x1a\x3d\x83\xa7\x2e\x27\x96\xa3\xc8\x3b\x00\xbc\x37\x93\x9a\x79\x21\xed\xf9\x34\xfc\xfe\xe6\x18\xc4\x11\x74\xfe\x03\xc5\x21\xe8\xfc\xd4\xbf\x43\x7f\x6f\xd5\x71\xa1\xf7\x84\xf6\x60\x60\x11\xda\x3e\xb2\x76\xd6\x1c\x97\xf8\xae\x12\xf2\xa0\x9a\xc8\x2f\x3a\x99\x7b\xab\x9e\xeb\x9c\xc8\x05\x72\x63\xd8\x29\xa8\xfd\x34\x9f\xb1\x66\x12\x25\xdd\xce\x3c\x2e\xc6\xbb\xa5\x23\x2d\xd9\xb8\x3c\xc2\x3e\xba\x1d\xad\x2c\xde\x75\xf9\xf7\x15\x6e\x41\x16\x3f\x1e\x63\x96\x91\x36\xbc\x55\xb8\xc6\xe2\x68\x18\x78\xe0\x0c\xff\x7a\x9b\xf4\xeb\x69\x54\x7c\xbb\xde\x03\xd2\x41\x29\xc8\xb3\x22\xa3\xd5\x16\x44\x9e\x23\x85\xfe\x54\x62\x98\xa7\xbf\xea\x46\xb7\x0f\x0b\xa1\x08\x1f\x4e\x4f\x22\x57\xdc\xb6\x74\xea\x90\x37\x3a\xa1\x27\xc7\x0b\xc5\x78\xd9\x01\xff\x90\xb3\x4d\xee\x82\xbe\x1b\x3f\x59\x61\xb6\xdd\x38\xa0\xad\xce\x61\x6e\xcc\x6a\x85\x58\x73\xc6\xf4\xaa\x4e\x96\xd2\x4d\xa6\x50\xa1\x60\xa0\xb9\x3c\x83\xf0\xe3\x8e\x36\x89\x9a\x9a\x9c\x45\x51\xf5\xd9\x74\xba\xa3\x18\x8b\xe6\xfa\xe4\x90\x8b\xd8\xd3\xf1\xa2\xf1\x0f\xd7\x05\x4d\xd4\xbf\x85\x86\x49\x77\xc6\xa4\xeb\xae\x91\x90\x57\x98\x2e\xd3\x29\xfc\x1b\x99\xe4\xbf\x51\xa6\x29\x4e\x53\x3f\x6b\x74\x66\x85\x61\x5c\x28\xac\x93\x79\xa3\x84\xed\x9c\xd1\x4a\xd9\x25\x06\xed\xa9\x97\x1b\xe2\xae\x90\xb3\xac\x74\xc3\x72\xd3\x8d\xb1\x2b\xea\xef\xfd\x3b\xdb\xfc\x41\x97\x62\x9e\x9f\x7f\x73\xb1\xff\x6f\x6c\xf0\xbb\x10\x7d\x5d\x45\xeb\xbf\x5b\x19\x7d\x24\x34\x3e\xb6\xab\xaf\x86\xc5\x3b\x11\xd2\xc9\x4b\x06\x79\x97\x9e\x92\x3f\x1d\x2d\x87\xb6\xf8\x83\x9f\x08\x9d\x3b\xb4\xeb\x03\x5f\x34\xf9\x6e\x36\xf0\x39\xce\xd1\x1f\x62\x62\x21\x56\xdc\x94\x43\x94\x11\xba\xe8\x33\xe9\xcb\xe8\x4b\x6b\xf4\xc9\x94\x9d\xe3\x27\xf8\xfe\x7e\x94\x8e\xac\x54\x92\x1c\xea\xa4\x55\xe1\x32\xbb\x38\xbb\x38\xef\x40\xf2\x63\xce\x5b\x5c\x4a\x72\x76\x7b\x97\x0b\xed\x63\x75\x07\x26\xdb\xbe\x4f\xa8\x5d\x10\x5b\xbc\x8f\xd2\xf1\xf5\x01\xa1\xf6\xaa\xf3\xba\x28\x64\x18\x8d\x31\x6b\x79\xcd\x57\xae\x91\xac\xe1\xfd\x40\x5c\x47\xb5\xd4\x7a\x36\xf4\x8c\x9c\xc4\x7f\x38\x7f\xa2\x0c\x0f\xdf\xd0\xbb\x43\x7f\xad\xdb\x23\xdf\x7e\xba\xeb\x58\x28\x4d\xfb\x01\x78\xcb\x49\x41\x17\xc6\x51\x37\x5c\xaf\xc4\xd6\x8f\x19\xd5\x7a\x98\x98\x6b\x52\xc6\xac\x9a\x1a\x24\x51\x83\x04\x46\x03\x99\x0a\xe1\x43\xff\xe1\x99\xa5\x37\x35\x0d\xdf\x31\x0a\x4d\xdd\x24\x73\xf2\xc9\x68\x9c\xc4\x6f\xc2\xbd\x30\xfe\x92\x11\x0e\xa7\xf1\xc7\x8d\xee\x7e\xe7\xf5\x1b\xbd\xe9\x6f\xcf\x93\xf3\xc9\xc9\x7f\x03\x00\x00\xff\xff\xdf\x04\x68\x25\xac\x20\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 931,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xcb\x6e\x9c\x40\x10\xbc\xf3\x15\x25\xed\x35\xe0\x60\xc9\x17\x6e\x51\x9c\x44\x96\x12\x6b\xa5\xc8\xb9\xf7\x0e\x0d\x1e\x79\x5e\x99\xe9\xd9\x2c\x41\xfe\xf7\x08\xf6\x05\xb1\xfb\x04\x54\x55\x57\x75\xcf\x50\x96\x65\xb1\x81\x65\xab\x48\x3d\x73\x8b\x96\x83\xf1\x83\x65\x27\xc8\x89\x5b\xec\x06\x7c\x35\xf9\x00\xf1\x98\x19\xc5\x06\xca\x3b\x21\xed\x38\x42\x5b\xea\x19\x96\x85\x5a\x12\xaa\x0a\x0a\xfa\x17\xc7\xa4\xbd\x6b\x40\x21\xa4\x9b\x7d\x5d\xbc\x68\xd7\x36\xb8\xbf\xb4\x2d\xce\xf4\xa6\x00\x1c\x59\x6e\xae\xee\xe3\x08\xdd\xa1\x7a\x24\xcb\x29\x90\x62\xbc\xbe\x9e\x48\xf3\x6b\x83\x71\x5c\xa3\xe3\x08\x76\xed\x44\x4b\x81\xd5\xd4\x31\x72\x30\x5a\x51\x6a\x50\x17\x40\x62\xc3\x4a\x7c\x9c\x10\xc0\x92\xa8\xe7\xef\xb4\x63\x93\x8e\x1f\xde\x04\x28\x00\x61\x1b\x0c\x09\x9f\x24\x8b\xb0\x53\x99\x95\xfa\x3d\x3d\x70\x8e\x32\xe3\xbe\xe5\x9f\xab\x10\x53\xed\x58\xa8\x7a\xc9\x3b\x8e\x8e\x85\x53\xa5\xfd\x8d\x4f\x0d\x8c\x76\xf9\x70\x22\x5d\x96\x7c\x31\x2b\xdf\x35\x9b\x6a\x3e\x86\x05\xd0\xd4\xd5\x5d\x75\xfb\x71\x8d\x6f\xb3\x31\x5b\x6f\xb4\x1a\x1a\x3c\x74\x8f\x5e\xb6\x91\xd3\x74\x1e\x67\x16\xc5\x7e\x31\x58\x89\xd2\xe2\xae\xbe\x05\xb0\xc1\x0f\x3a\x68\x9b\xed\xe4\xe0\xe3\x30\xdd\x85\x9c\xf8\x03\xb4\x83\xe5\x9e\x76\x83\x70\x5a\x0a\x1f\x70\x67\xb1\x12\x26\xfd\x97\xd1\xf9\x08\xef\x18\x5a\xd8\x2e\xe9\x01\x75\x7d\x5b\xd7\xd8\xe0\x9e\x3b\xca\x46\x10\x7c\xbc\xe6\xda\x4c\x9c\xfd\xfe\xf8\xf8\xe4\x94\xb7\xf3\xed\x14\x8f\x9e\x05\xc6\xf7\x09\xbe\x03\x93\x7a\x46\xe4\xdf\x99\x93\x80\x5c\x8b\xc8\x29\x78\x97\xb8\xba\x34\x9a\xba\xae\x26\x3c\xee\x53\x19\xcd\x4e\xae\x03\x2c\x76\xbf\xf5\x51\x9a\x63\xba\x0b\x9c\x58\xe5\xa8\x65\xf8\xec\x9d\xf0\x41\x9a\x85\x2e\x66\xf7\x29\x3d\x25\x8e\xff\x6b\x4e\xd0\xb7\xe8\x73\x78\x8b\x91\x31\xfe\xcf\x36\xea\xbd\x36\xdc\xf3\x97\xa4\xc8\x90\xcc\xff\x50\x47\x26\x71\xf1\x2f\x00\x00\xff\xff\x68\x3b\xcf\xad\xa3\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-config.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
