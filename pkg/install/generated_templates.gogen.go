// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-config.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-config.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 463,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x4b\x03\x31\x10\x85\xef\xf9\x15\x8f\x16\x6f\xdd\x82\x1e\xf7\x26\x05\xc1\x83\x5e\x14\xef\xc3\x66\xb6\x1d\xdc\x26\x4b\x32\xdb\x0a\x31\xff\x5d\x36\xa1\xcb\x2a\x9e\x32\xc3\xbc\xf7\x65\x5e\x92\x12\xa4\xc7\xfe\xe0\x5d\x2f\xc7\x27\x19\xf8\xe0\x9d\xb2\x53\x34\x39\x9b\xa6\x69\xcc\x16\xef\x27\x46\xef\x87\xc1\x5f\xc5\x1d\x21\x11\x53\x64\x0b\xf5\x18\x83\xbf\x88\x65\x10\xba\x62\x9f\x02\xa9\x78\x87\xde\x07\xf4\xc3\xf4\x65\xf7\x66\x8b\xe7\x85\xfe\x18\xeb\xf9\x42\xe3\x4c\x89\xac\x33\x44\xc3\xc4\x3b\xe8\x89\xff\x40\x24\xa2\x0b\x4c\xca\xd6\x6c\x41\x11\x84\xc5\xbd\x83\xd7\x13\x87\xab\x44\x86\xe8\x4a\x59\x75\x6f\xdc\x05\xd6\xbd\xa1\x51\x3e\x38\x44\xf1\xae\xc5\xe5\xde\x7c\x8a\xb3\x2d\x7e\xe5\x5d\x6f\x94\xf3\x52\xa7\x04\x1e\x22\x23\xe7\x8a\x9a\x7b\x67\x91\xb3\x39\xb3\x92\x25\xa5\xd6\x00\x8e\xce\xdc\x96\x9c\x4d\xdd\xdc\xe0\x46\x7f\xa5\x33\xc7\x91\x3a\x2e\xaf\x58\xa5\xa5\x2f\xf7\xaf\xc6\x65\x9a\x52\x73\xe3\x57\x76\x4a\x18\x83\x38\xed\xb1\xb9\x8b\x9b\xff\x3e\xe7\x1b\xe2\xec\x5c\x3c\xcc\xae\x15\xe0\x27\x00\x00\xff\xff\x02\xd2\xd6\x67\xcf\x01\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 8037,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5f\x73\xdb\x36\x12\x7f\xf7\xa7\xd8\x51\x6e\x26\xf1\x8c\x44\xd9\x75\xdb\xbb\x61\xcf\x9d\x4b\xf3\xc7\xf5\xa5\x49\x3d\x76\x72\x37\x7d\xaa\x21\x72\x25\x62\x04\x02\x3c\x2c\x28\x55\xe3\xe9\x77\xbf\x59\x80\x20\x41\x49\x76\x72\x79\xbb\x3c\xc4\x36\xb9\x58\x2c\x7e\xfb\xef\x87\xe5\x6c\x36\x3b\x11\x8d\xfc\x17\x5a\x92\x46\xe7\x20\x9a\x86\xe6\x9b\xf3\x93\xb5\xd4\x65\x0e\xaf\xb1\x51\x66\x57\xa3\x76\x27\x35\x3a\x51\x0a\x27\xf2\x13\x00\x2d\x6a\xcc\x61\xa9\xda\x3f\x1e\x1e\x40\x2e\x21\xfb\x20\x6a\xa4\x46\x14\x08\x7f\xfe\xd9\xbd\xf7\x7f\xe6\xf0\xf0\x30\x7e\xfb\xf0\x00\xa8\x4b\x16\xa3\x06\x0b\x56\x66\xb1\x51\xb2\x10\x94\xc3\xf9\x09\x00\xa1\xc2\xc2\x19\xcb\x6f\x00\x6a\xe1\x8a\xea\x17\xb1\x40\x45\xe1\x41\xba\x37\x4b\x3b\x2b\x1c\xae\x76\xe1\xa5\xdb\x35\x98\xc3\x2d\x16\x16\x85\xc3\x13\x00\x87\x75\xa3\x84\xc3\x4e\x59\x72\x02\xfe\x27\xb4\x36\x4e\x38\x69\x74\xaf\x1c\xa0\xb1\xa6\x46\x57\x61\x4b\x99\x34\xf3\xc6\x58\x97\xc3\xe4\xe2\xec\xe2\x7c\x02\xcf\xc0\xa1\x52\x89\x04\x38\x03\x54\x58\xd1\x20\xcc\x6b\x74\x56\x16\xc4\x87\x6b\x8c\xd4\xee\x39\x01\x2f\xce\x3a\xc5\x6a\x74\x86\xbd\x53\x00\x44\x2c\xfc\x2b\x53\xe2\xdd\x08\x05\xfe\xb7\x40\x27\xb2\x75\xbb\x40\xab\xd1\xa1\x37\xce\x50\x0e\x4a\xea\x4e\x05\x43\x67\x37\xb2\xc0\x97\x45\x61\x5a\xed\x3e\x8c\x77\x00\xd8\x18\xd5\xd6\xd8\xdb\x30\xeb\x6c\x58\x49\x37\x5b\xe3\xae\xdf\x88\x18\x3e\x37\x6c\x1c\x9f\x0c\xfa\x66\xbc\xa4\xf4\x91\x91\x48\x95\xb8\x14\xad\x72\xef\x4d\x89\x39\x9c\x7d\x7b\x76\x06\xcf\x60\x5b\xa1\x86\x9a\xad\xc1\x12\x2c\x8a\x72\x66\xb4\xda\x4d\x61\x8b\xb0\x35\xfa\xb9\x83\x05\x82\x58\x28\x64\x20\x8b\xaa\x36\xe5\x49\xa7\xf0\x19\x7c\xac\x24\x81\x24\x10\xe0\xea\x66\x49\xd0\x12\x96\xb0\x34\x16\x56\xa8\xd1\x0a\x27\xf5\x0a\xee\xee\x7e\x86\x35\xee\x28\x83\x6b\x0d\xef\xfe\x46\xf0\xe3\x25\x9c\x67\xe7\x67\xd3\x5e\x4b\xdc\x3b\x1c\x81\x40\x58\x4c\xed\x20\xc3\xa6\x68\xc4\x12\x04\x10\x36\x82\xa3\xa9\x03\x0a\xb6\xd8\xab\x29\x84\x86\xad\x95\x8e\x0d\xcd\x8e\xe3\xb7\x42\xdd\x83\x81\x75\xe3\x76\xaf\xa5\x4d\x41\xac\xb1\x94\x6d\x9d\xc3\x7b\xac\x8d\xdd\xa5\xe7\x44\x58\x1a\xa5\xcc\x96\x4f\xd4\x6d\x2d\xc9\x1f\xb5\x25\x7e\x26\xa0\x68\xc9\x99\x5a\x32\x02\x6b\x6d\xb6\xfa\xf7\xca\x90\xa3\x5e\xc5\x52\x2a\x9c\xc2\xb6\x92\x45\x05\x3b\xd3\xc2\x56\x2a\x15\x0e\xe5\x0c\x94\x86\x13\x94\x1f\xf3\x22\xfe\xc5\x82\xd9\x6a\x36\xbb\x57\x60\xb1\x31\x60\x85\xab\xd0\x82\xab\x84\xee\x36\x5e\x49\x57\xb5\x0b\x30\xfc\x10\x41\xc9\x35\x66\xf0\x9b\x69\x9f\x2b\x05\x42\x91\x89\x5b\x8c\xc1\x06\xe9\x40\x6a\x67\xfc\x9a\xc2\x68\x27\xa4\x46\x3b\x85\x05\x2a\xb3\xcd\xe0\x0e\x07\x54\x2b\xe7\x1a\xca\xe7\xf3\xd2\x14\x94\x71\x60\x15\x25\x87\x35\xea\x39\xe7\x2c\xb9\xf9\xaa\x95\x25\xd2\xbc\x25\x9c\x35\x56\x6e\x84\x43\x1f\x7a\x7c\x90\xac\x72\xb5\xea\x35\x45\x5f\x10\x55\xb3\xc2\xe8\xa5\x5c\xf5\xaf\x00\xc2\x83\xf7\xa2\xc9\x93\x87\x69\x06\xce\x92\x65\x5f\xeb\x17\x9f\x9a\xf3\xa0\x64\x08\xbf\xcf\xfa\x64\x2b\xa9\xe2\x27\x95\xd8\x20\x08\x28\xe5\x72\x89\x96\xab\x6d\xd4\xd0\x65\xd5\x50\x51\xbd\x0b\x82\xba\xd4\x09\x5c\x95\x36\xb2\xc4\x08\xfb\x52\xae\x6a\xd1\x0c\x86\x48\x57\x81\xd0\x80\xda\xd9\x9d\x3f\xc3\x7d\x10\xba\x9f\x82\xd0\x25\xb4\xba\x30\x35\x97\x79\xbf\x3e\x9c\xf6\xbd\x77\xa7\xd0\x65\xaf\x05\xf5\xc6\x6b\x90\x48\x9d\x3f\x0f\x3c\xc0\x30\x7c\x85\x07\x92\x65\x9f\xf5\x80\xaf\x04\xce\x80\xac\xb9\xc0\xc2\xd5\xcd\x95\x2f\x02\xf0\x82\x8f\x45\x72\xa5\xa5\x1e\x36\xe7\xc3\x6d\xd0\xca\xa5\x2c\x7c\xa5\x87\xa6\xb5\x8d\x21\xa4\xd3\x2f\x00\xb2\xd7\x12\xca\x47\x40\x91\x01\xe2\xfd\xbe\x00\x38\x10\x76\x35\xa4\xe9\x23\x88\xad\x9a\x15\xd7\x0f\x4a\xa0\x19\x97\xe0\x67\x8f\x14\xe1\xc3\x75\x47\x8a\x70\x84\xf3\xe1\x61\xe6\x1b\xf5\x2b\x0f\xf2\x5b\xa9\xf0\x95\xd1\x8e\xed\xf6\x0d\xfb\xcb\x10\x8f\xd0\x88\xce\xa3\xad\x0d\x98\x32\xf0\x6c\x53\x39\xd2\x34\xac\x0f\xfd\xb8\x64\x03\x18\xa5\x59\x97\x6c\x33\x2e\x5c\xc0\xf8\x31\x56\x4a\xea\x01\x70\xd3\x78\xc5\x92\xe2\x9e\x65\x06\xd7\xbd\xf9\x2f\xe9\x55\x8c\x28\x16\x21\x74\x6c\x9d\xb3\x2d\x4e\x47\x6e\x1b\x5b\xc9\xcd\x84\xa8\xad\xc3\x59\xb8\xf3\x40\xaf\x66\x0a\x86\xab\xdf\x56\x12\xfa\x02\xd6\x8b\xf6\xba\xe2\x92\x3b\xef\x87\xec\x28\xac\xa9\x5d\x3d\xac\xb3\x34\xce\xbb\x83\x07\x68\xfa\xee\x70\x90\x1f\x7b\xd9\x31\x4a\x28\xde\x92\x19\xd4\xac\xdf\xa1\x33\xe2\x85\x36\xee\x88\x25\xa7\xff\x93\x29\x5f\xd0\xfd\xbf\xc0\x9a\x8e\xe1\x9d\xf4\xc7\x0b\x5d\xe0\x80\x7b\x24\xec\xa4\x8b\x1a\x8b\xbe\x47\x6b\x03\x93\x3c\x74\x81\x09\xc8\x5a\xac\x90\xfa\x28\xcb\xe0\xad\xd4\xa5\x8f\xa4\x9a\x5b\x9a\xc5\x62\xa8\x98\xa1\x9d\x29\x14\x84\xdc\xb8\xfc\x52\x2e\x00\x4c\x6e\x41\xb8\xbe\xe7\x54\xed\x22\x2b\x4d\xb1\x46\x9b\x15\xa6\x9e\xdb\x79\xe8\x3f\xfe\xc7\xdc\x89\x3e\x6d\x63\x0d\x61\x92\xca\x04\x96\x77\x75\x62\x05\x6c\x69\xd6\xcb\xf8\x6d\x72\xe8\x14\x4a\x93\x6a\xcb\xcf\xb3\xf3\xbf\x66\xe7\x63\xd9\x9b\x56\xa9\x1b\xa3\x64\xb1\xcb\xe1\x7a\xf9\xc1\xb8\x1b\x8b\x94\x9e\xc2\x22\x99\xd6\x16\x48\xa9\x2b\x2c\xfe\xa7\x45\x72\xa3\x67\x00\x45\xd3\xe6\xf0\xdd\x59\x3d\x7a\x58\x7b\x9a\x91\xc3\xf7\xdf\xbe\x97\x03\xb7\x35\x36\x5d\x3c\x1b\x3c\x73\xe3\x79\xee\xc5\xd9\x05\xb3\x36\xa9\x97\xc6\xd6\x3e\x69\x84\xea\xa5\x95\xdc\xa0\x46\xa2\x1b\x6b\x16\x98\x5a\xc0\x90\x5e\x8d\x63\x26\x6c\x15\x14\x8e\x1f\x0b\x57\xe5\x30\x17\x8d\x0c\x48\x6f\xbe\x9f\xcb\x12\xb5\x93\x6e\x97\x35\xed\x22\x91\x95\x5a\x3a\x29\xd4\x6b\x54\x62\x77\xc7\xbd\xa1\xa4\x1c\xbe\x4b\x04\x9c\xac\xd1\xb4\xee\xc8\x3b\x26\x78\xf2\xff\xc3\xd4\xa4\x61\x8c\x1c\x73\x9c\x9a\x43\xa0\x58\x37\xc1\x32\x74\x85\xb7\xac\x9c\x13\x55\xa1\x42\xf9\xeb\x12\x28\xd3\xf5\xba\x15\xbb\x0c\xa4\x0e\x31\xf7\x9c\xc2\x1a\xa2\x6a\x3e\xca\xe1\x88\xd9\xaf\x5a\xed\x72\x5f\x46\x59\x1b\xf3\x6f\xdf\x1d\x17\x1d\xa9\xe0\x94\x6a\xd0\x2e\x8d\x2d\x90\x95\x06\xc2\xcd\x7c\xfb\x31\xc3\x53\x4e\x3c\xb6\x7d\x23\x6c\x67\x7b\x10\xfb\x3a\xf3\x93\x1c\xbd\xd6\x85\x6a\x7d\xd7\xe6\x6b\x43\x20\x57\xb1\xa3\x07\x5e\xfa\x19\x1a\x1d\x89\xf4\x0f\xbc\x74\x8f\xe2\x0e\xcd\xac\xc4\x42\x09\xcb\xd7\x85\x85\xd9\x24\x05\xe0\x09\x0a\x1a\x5a\x73\x7a\x78\x6b\x8c\x9b\x67\x44\xd5\xa3\x07\x10\x7a\xb4\xeb\x64\xa0\x47\x93\xb0\xf3\x34\x8a\x24\x1a\x50\x6f\xa4\x35\xda\x93\x91\xc0\xf3\x26\xef\x3e\xfd\xf4\xe6\xd5\xaf\x1f\xde\x5e\x5f\x4d\x02\xfd\x98\x32\x1e\x66\x83\xd6\x8e\xb9\x62\xa2\xc6\x37\xfb\xc5\x2e\x30\x39\xa7\x8e\x9d\xf1\x80\xe4\x1d\x9e\x71\x08\x4e\x16\x7e\xf4\xa0\x4c\x2a\xf8\xb6\x1c\x77\xe3\x12\x9d\xd0\xe0\xce\x3a\xef\x93\x44\xc5\x3e\x99\x4e\x9d\xee\x99\x74\xbc\xf6\x09\x0d\x42\x39\xb4\x9a\xaf\x75\x07\x16\x2f\xad\xa9\x7b\x2e\x53\x33\x09\x10\xc4\xe1\xd6\x31\x3a\x86\x41\x99\x62\x4d\x87\xce\x46\xbd\xc9\x8f\xe0\x32\xc0\x3d\xc2\x65\x23\x54\x8b\x07\x98\x7c\x2e\x88\xf7\x63\x20\xf2\xbd\x27\x22\x80\xe9\xe6\x98\x66\x3e\x41\x34\x1f\x89\x4b\x96\x0a\xcc\x7a\x24\x37\xae\x0f\x83\xd1\xdd\xfc\xe7\x90\x56\x0e\x84\xe0\x8b\x78\xc7\x23\xd1\x93\xec\xb3\xcf\x2a\x1e\xcb\xfa\xad\xd0\x9e\x0e\x52\xdb\x34\x6a\x07\x3f\x7f\xfc\x78\x03\x0b\x41\xb2\x00\xd1\xba\x8a\xb9\xa8\xaf\xe2\x42\x05\x46\x31\xdc\x83\x59\xe1\x46\x0a\x0f\xfa\xfd\xd5\xf5\xc7\xdf\x5f\x7e\xfa\xf8\xf3\xa7\xbb\x37\xb7\xf7\x1e\xea\xfe\xd1\xbb\x37\xbf\xdd\x8f\x92\x6d\x23\xac\x14\x0b\x85\x14\x2f\x86\x89\x42\x1a\xd1\xc5\x2e\x76\xde\x5a\x53\x8f\xe3\x27\x88\xdd\xe2\x32\x1f\xa1\x3e\x62\x81\x5c\x54\xf9\x08\x03\x00\xec\xef\x7c\x84\x47\x80\x20\xcc\x66\xb0\x64\x16\x50\x88\xa2\x62\xea\xad\x47\x79\xd5\x5f\x27\x19\x29\xd6\x3e\x4d\xb4\x18\xdb\xdd\x17\x93\x05\xdd\x6c\xc9\x2f\x9c\xfa\x4d\x0a\xa1\x23\xc6\xae\x42\x4a\xe3\x70\xb8\x43\xb8\xad\x61\x2b\x5b\xc6\xc9\x67\xbb\x9f\xa0\x79\xd7\x42\x65\xb6\x7e\xee\x63\xb4\xc6\xc2\xbb\x4c\xba\x71\xdc\xce\x66\xfd\x01\xfc\xa5\x9f\x37\xbf\xec\x1f\x65\xdd\x65\x27\xa3\x4d\x91\x15\xaa\x25\x87\x36\xe3\xe6\xa1\x52\x48\x3e\x51\xa8\x73\x03\x14\xaf\x82\xe8\xf5\xcd\xe8\x50\x5c\xf2\x08\x9d\x9f\x2b\x8d\xb3\x6a\xb0\x21\xca\x73\x74\x39\xcb\x92\x7e\xd2\x93\xc4\x79\x6a\x71\x27\x7d\x79\x32\x62\xb8\x92\xa0\x6e\xc9\x4f\xbe\x3c\x7a\x12\xcb\x90\xca\x0b\xdf\x54\x3d\xbf\xf4\x03\xaf\x17\x71\x8a\x74\x9a\xda\x12\x0b\x5b\x28\x01\x1c\xc0\xc9\xdc\x6b\x64\x08\x37\xa2\xd0\x5c\x67\xa5\xb4\x97\x07\x2d\x37\x35\xeb\x36\x61\xb7\x83\xf3\x3e\xdd\xfe\x12\x06\x73\x42\xaf\xc2\xbb\x2b\xe9\xfc\xb0\x88\xa4\x33\x76\xd7\xb7\x8a\xb7\xcc\xca\x13\x75\x4f\xe5\x1c\x87\x4d\x72\xf6\x2e\x65\x8e\xa6\x53\x9a\x0b\x91\xb7\xff\xe5\x45\x9a\x99\xa7\xf9\xf0\xf7\xbb\x37\xbf\x9d\xfe\x23\x8c\xac\x3c\xa5\x6f\x09\xed\x7c\x30\x36\x4b\x13\x9d\xf1\xe1\x74\x6a\xad\xba\x7c\x78\x80\xec\x4a\x3a\x3e\xec\xa8\x64\x05\x89\x85\x15\xba\xa8\xa2\xd0\x4f\xfe\xaf\x30\xc5\xe6\xb2\x77\x25\x7d\xc5\xa2\x63\x2b\x99\x3f\xf2\xba\x3b\x1f\x29\xf4\x4f\x23\x75\xb2\x60\x32\x9d\x74\xc3\x70\x45\x98\x2e\x7f\xba\xa8\x59\xe4\xc0\x2b\xc2\xb4\xa1\x16\x5a\x2e\xf9\x3e\xc0\x39\x44\xb2\x44\x1b\xdc\xb1\x77\xab\xf2\xb3\x38\x43\x08\xad\x2e\xd1\xee\xf9\xd8\xa2\x12\x4e\x6e\xd0\xd3\x5d\x8a\x11\xb8\x1a\xf9\x79\x2f\x27\xfb\xc3\x51\xbb\x28\xa5\x3d\x9f\x86\x9f\xdf\xf4\x93\xfd\x01\x1c\x3f\xb9\x3f\x06\x8e\x1f\x87\x47\x54\xa3\xd4\x11\x05\x9f\x08\xed\xb1\xf5\xec\xdc\xde\x73\x2c\x03\xc7\xd7\xbf\xa9\x85\x3c\x6a\x00\xf2\x8b\xa8\x21\x4a\x0d\xdf\x26\x8e\xba\x03\xb9\x94\x6c\x0d\x03\x8a\xda\x8f\xad\x19\x27\x66\x0b\xd2\xed\x0d\x9e\x52\xac\xba\xbe\xdb\x75\xd5\xcb\x27\xda\x6c\x5c\xd1\xe9\xe2\x55\x97\x7f\x5f\xe3\x0e\x64\xf9\xe3\x53\x14\x2a\xb1\x86\x97\x0a\xd7\x5a\x1c\x4d\xbd\x8e\xec\xe1\x5f\xef\x66\xbd\x3c\x8d\xca\x54\xac\xd2\x20\x1d\x54\x82\x7c\xfb\x37\x5a\xed\x40\x14\x05\x52\xa8\xe4\x15\x86\xc1\xf1\x8b\x38\xa3\xbc\x5f\x0a\x45\x78\x7f\x7a\x12\xa7\x22\x57\xd2\xdd\x76\xbc\xe1\x98\x0f\xa2\x52\x2f\x7f\x98\x07\xc7\xc5\x8e\xf8\x87\x9c\x6d\x0b\x17\xec\xdd\xfa\x11\x02\xd3\xca\xd6\x01\xed\x74\x01\x0b\x63\xd6\x6b\xc4\x86\xa3\xbd\x37\x75\xb2\x92\x6e\x32\x85\x1a\x05\x03\xcd\x85\x0c\x84\xbf\xd7\x77\x09\xd0\x36\xe4\x2c\x8a\xba\xcf\x84\xd3\x3d\xc3\x58\xf5\x8c\x9c\x70\x78\xc9\x85\xe5\xd1\x78\xd1\xf8\x87\x8b\x41\x93\x74\x3a\xa1\x61\x12\xf7\x98\xc4\x3e\x94\x28\x79\x81\xd9\x2a\x9b\xc2\xbf\x91\xd9\xec\x2b\x65\xda\xf2\x34\xf3\x43\x35\x67\xd6\x18\xe6\x62\xc2\x3a\x59\xb4\x4a\xd8\xe8\x8c\x4e\xcb\x7e\x0b\xed\x76\xbd\xdc\x12\xd7\xcf\x82\x75\x65\x5b\xd6\x9b\x6d\x8d\x5d\x53\x7f\xc1\xdd\x5b\xe6\x37\xba\x14\x8b\xe2\xfc\x9b\x8b\xc3\xff\xd3\x03\xbf\x09\xd1\x17\xab\x51\xff\x81\xc6\xe8\x27\x42\xe3\x7d\x27\x7d\x35\x08\xef\x45\x48\xd4\x37\x1b\xf4\x5d\x7a\xee\xf9\x78\xb4\x1c\x5b\xe2\x37\x7e\x24\x74\xee\xd0\x6e\x8e\x7c\xba\xe3\x4b\xc8\xc0\x7c\x38\x47\x7f\x48\x5b\xb0\x58\x73\xfb\x0a\x51\x46\xe8\x92\xef\x81\xcf\x93\x4f\x8a\xc9\xb7\x41\x76\x8e\x1f\x55\xfb\x8b\x40\x36\x3a\xa5\x92\xe4\x50\xcf\x3a\x13\x2e\xf3\x8b\xb3\x8b\xf3\x08\x92\x9f\xe7\xdd\xe2\x4a\x92\xb3\xbb\xbb\x42\x68\x1f\xab\x7b\x30\xd9\xee\xfd\x8c\x3a\x81\xc3\x13\x77\xe5\xf0\x65\x59\xca\x30\xd3\xe1\x7e\xfd\x92\xef\x0a\x23\x04\x87\xf7\x03\x65\x1b\xf1\x6f\xeb\x79\xc0\x67\xf4\xcc\xfc\x17\xdf\xf4\xc9\xd8\x92\xee\xb7\xb8\xe9\xaf\x4d\xb7\xe5\xeb\x0f\x77\x91\x7f\xd1\xb4\x9f\xdc\x76\x6c\x0c\x74\x69\x1c\xc5\xa9\x70\x2d\x76\x7e\x3e\xa6\x36\xc3\xa8\x57\x93\x32\x66\xdd\x36\x20\x89\x5a\x24\x30\x1a\xc8\xd4\x08\xef\xfa\x2f\xa6\xac\xbd\x6d\x68\x18\xc0\x97\x9a\xe2\x08\x6e\xf2\xc1\x68\x9c\xa4\x6f\xc2\x85\x26\x1d\xc1\x87\xcd\x69\x3c\x95\x8f\x37\x1b\x6f\xdf\xe8\x4d\x7f\xed\x9b\x9c\x4f\x4e\xfe\x1b\x00\x00\xff\xff\x09\x0c\x04\x67\x65\x1f\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 931,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xcb\x6e\x9c\x40\x10\xbc\xf3\x15\x25\xed\x35\xe0\x60\xc9\x17\x6e\x51\x9c\x44\x96\x12\x6b\xa5\xc8\xb9\xf7\x0e\x0d\x1e\x79\x5e\x99\xe9\xd9\x2c\x41\xfe\xf7\x08\xf6\x05\xb1\xfb\x04\x54\x55\x57\x75\xcf\x50\x96\x65\xb1\x81\x65\xab\x48\x3d\x73\x8b\x96\x83\xf1\x83\x65\x27\xc8\x89\x5b\xec\x06\x7c\x35\xf9\x00\xf1\x98\x19\xc5\x06\xca\x3b\x21\xed\x38\x42\x5b\xea\x19\x96\x85\x5a\x12\xaa\x0a\x0a\xfa\x17\xc7\xa4\xbd\x6b\x40\x21\xa4\x9b\x7d\x5d\xbc\x68\xd7\x36\xb8\xbf\xb4\x2d\xce\xf4\xa6\x00\x1c\x59\x6e\xae\xee\xe3\x08\xdd\xa1\x7a\x24\xcb\x29\x90\x62\xbc\xbe\x9e\x48\xf3\x6b\x83\x71\x5c\xa3\xe3\x08\x76\xed\x44\x4b\x81\xd5\xd4\x31\x72\x30\x5a\x51\x6a\x50\x17\x40\x62\xc3\x4a\x7c\x9c\x10\xc0\x92\xa8\xe7\xef\xb4\x63\x93\x8e\x1f\xde\x04\x28\x00\x61\x1b\x0c\x09\x9f\x24\x8b\xb0\x53\x99\x95\xfa\x3d\x3d\x70\x8e\x32\xe3\xbe\xe5\x9f\xab\x10\x53\xed\x58\xa8\x7a\xc9\x3b\x8e\x8e\x85\x53\xa5\xfd\x8d\x4f\x0d\x8c\x76\xf9\x70\x22\x5d\x96\x7c\x31\x2b\xdf\x35\x9b\x6a\x3e\x86\x05\xd0\xd4\xd5\x5d\x75\xfb\x71\x8d\x6f\xb3\x31\x5b\x6f\xb4\x1a\x1a\x3c\x74\x8f\x5e\xb6\x91\xd3\x74\x1e\x67\x16\xc5\x7e\x31\x58\x89\xd2\xe2\xae\xbe\x05\xb0\xc1\x0f\x3a\x68\x9b\xed\xe4\xe0\xe3\x30\xdd\x85\x9c\xf8\x03\xb4\x83\xe5\x9e\x76\x83\x70\x5a\x0a\x1f\x70\x67\xb1\x12\x26\xfd\x97\xd1\xf9\x08\xef\x18\x5a\xd8\x2e\xe9\x01\x75\x7d\x5b\xd7\xd8\xe0\x9e\x3b\xca\x46\x10\x7c\xbc\xe6\xda\x4c\x9c\xfd\xfe\xf8\xf8\xe4\x94\xb7\xf3\xed\x14\x8f\x9e\x05\xc6\xf7\x09\xbe\x03\x93\x7a\x46\xe4\xdf\x99\x93\x80\x5c\x8b\xc8\x29\x78\x97\xb8\xba\x34\x9a\xba\xae\x26\x3c\xee\x53\x19\xcd\x4e\xae\x03\x2c\x76\xbf\xf5\x51\x9a\x63\xba\x0b\x9c\x58\xe5\xa8\x65\xf8\xec\x9d\xf0\x41\x9a\x85\x2e\x66\xf7\x29\x3d\x25\x8e\xff\x6b\x4e\xd0\xb7\xe8\x73\x78\x8b\x91\x31\xfe\xcf\x36\xea\xbd\x36\xdc\xf3\x97\xa4\xc8\x90\xcc\xff\x50\x47\x26\x71\xf1\x2f\x00\x00\xff\xff\x68\x3b\xcf\xad\xa3\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-config.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
